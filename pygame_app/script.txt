#!/bin/bash

# pygame/run.sh
# Spatial Audio System - Run Script
# Starts the pygame application with proper environment

echo "Starting Spatial Audio System..."

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "Virtual environment not found. Running setup..."
    ./setup.sh
fi

# Activate virtual environment
source venv/bin/activate

# Check if all dependencies are installed
echo "Checking dependencies..."
python3 -c "
import sys
try:
    import pygame
    import numpy
    import sounddevice
    import serial
    print('All dependencies verified')
except ImportError as e:
    print(f'Missing dependency: {e}')
    print('Please run ./setup.sh to install dependencies')
    sys.exit(1)
"

if [ $? -ne 0 ]; then
    exit 1
fi

# Set environment variables
export PYGAME_HIDE_SUPPORT_PROMPT=1

# Create log file with timestamp
log_file="logs/app_$(date '+%Y%m%d_%H%M%S').log"

echo ""
echo "Professional Spatial Audio System"
echo "================================="
echo "Log file: $log_file"
echo "Press Ctrl+C to stop"
echo ""

# Run the application with logging
python3 main.py 2>&1 | tee "$log_file"

echo ""
echo "Application stopped"
#!/bin/bash

# pygame/setup.sh
# Enhanced Setup Script with Modern Bluetooth Support
# Prioritizes 'bleak' for reliable cross-platform Bluetooth connectivity

echo "üöÄ Setting up Enhanced Spatial Audio System..."
echo "=============================================="

# Check Python version
python_version=$(python3 --version 2>&1 | grep -o '[0-9]\+\.[0-9]\+' | head -1)
major_version=$(echo "$python_version" | cut -d. -f1)
minor_version=$(echo "$python_version" | cut -d. -f2)

echo "üêç Python version: $(python3 --version)"

if [ "$major_version" -lt 3 ] || ([ "$major_version" -eq 3 ] && [ "$minor_version" -lt 8 ]); then
    echo "‚ùå Error: Python 3.8 or higher required. Found: $python_version"
    exit 1
fi

# Clean up existing environment
if [ -d "venv" ]; then
    echo "üßπ Removing existing virtual environment..."
    rm -rf venv
fi

# Create fresh virtual environment
echo "üì¶ Creating fresh virtual environment..."
python3 -m venv venv

# Activate virtual environment
echo "‚ö° Activating virtual environment..."
source venv/bin/activate

# Upgrade core tools
echo "‚¨ÜÔ∏è  Upgrading pip and core tools..."
pip install --upgrade pip setuptools wheel

echo ""
echo "üìö Installing Core Dependencies..."
echo "=================================="

# Install core dependencies
echo "üéÆ Installing pygame..."
pip install pygame>=2.5.0

echo "üî¢ Installing numpy..."
pip install numpy>=1.24.0

echo "üîä Installing audio support..."
pip install sounddevice>=0.4.6

echo "üîå Installing serial communication..."
pip install pyserial>=3.5

echo "üßÆ Installing scipy..."
pip install scipy>=1.10.0

echo "üé® Installing additional UI support..."
pip install pygame-gui>=0.6.0
pip install psutil>=5.9.0

echo ""
echo "üì∂ Installing Bluetooth Support..."
echo "=================================="

# Modern Bluetooth support (bleak - recommended)
echo "üîµ Installing 'bleak' for modern Bluetooth BLE support..."
if pip install bleak>=0.20.0; then
    echo "‚úÖ Successfully installed 'bleak' - Modern Bluetooth BLE support enabled"
    BLUETOOTH_SUCCESS=true
else
    echo "‚ö†Ô∏è  Failed to install 'bleak', trying alternative..."
    BLUETOOTH_SUCCESS=false
fi

# Fallback to pybluez if bleak fails
if [ "$BLUETOOTH_SUCCESS" = false ]; then
    echo "üîµ Trying 'pybluez' as fallback..."
    
    # Install system dependencies for pybluez (Linux/macOS)
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "üêß Detected Linux - checking for bluetooth dev packages..."
        if command -v apt-get &> /dev/null; then
            echo "üì¶ Installing libbluetooth-dev for pybluez..."
            sudo apt-get update
            sudo apt-get install -y libbluetooth-dev pkg-config
        elif command -v yum &> /dev/null; then
            echo "üì¶ Installing bluez-libs-devel for pybluez..."
            sudo yum install -y bluez-libs-devel
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "üçé Detected macOS - pybluez should work with Xcode tools"
        if ! command -v brew &> /dev/null; then
            echo "‚ö†Ô∏è  Homebrew not found. Install it for better Bluetooth support"
        fi
    fi
    
    if pip install pybluez; then
        echo "‚úÖ Successfully installed 'pybluez' - Legacy Bluetooth support enabled"
        BLUETOOTH_SUCCESS=true
    else
        echo "‚ùå Failed to install pybluez"
        BLUETOOTH_SUCCESS=false
    fi
fi

# Report Bluetooth status
echo ""
if [ "$BLUETOOTH_SUCCESS" = true ]; then
    echo "‚úÖ Bluetooth support successfully configured"
else
    echo "‚ö†Ô∏è  Bluetooth support not available - app will work with serial and demo mode"
    echo "   For Bluetooth support, try:"
    echo "   - Install system Bluetooth development packages"
    echo "   - Use a different Python version"
    echo "   - Run on a different operating system"
fi

echo ""
echo "üìÅ Creating Application Structure..."
echo "==================================="

# Create necessary directories
echo "üìÇ Creating directories..."
mkdir -p audio_files
mkdir -p assets/fonts
mkdir -p assets/images
mkdir -p logs
mkdir -p temp

# Create enhanced audio files
echo "üéµ Generating enhanced audio files..."
python3 -c "
import numpy as np
import wave
import os

def generate_waveform(frequency, duration=2.0, sample_rate=44100, waveform_type='sine'):
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    
    if waveform_type == 'sine':
        wave_data = np.sin(2 * np.pi * frequency * t)
    elif waveform_type == 'square':
        wave_data = np.sign(np.sin(2 * np.pi * frequency * t))
    elif waveform_type == 'sawtooth':
        wave_data = 2 * (t * frequency - np.floor(t * frequency + 0.5))
    elif waveform_type == 'triangle':
        wave_data = 2 * np.abs(2 * (t * frequency - np.floor(t * frequency + 0.5))) - 1
    else:
        wave_data = np.sin(2 * np.pi * frequency * t)  # Default to sine
    
    # Apply envelope to prevent clicks
    envelope_samples = int(0.05 * sample_rate)
    if len(wave_data) > 2 * envelope_samples:
        wave_data[:envelope_samples] *= np.linspace(0, 1, envelope_samples)
        wave_data[-envelope_samples:] *= np.linspace(1, 0, envelope_samples)
    
    # Convert to 16-bit
    wave_data = (wave_data * 0.8 * 32767).astype(np.int16)  # 80% volume to prevent clipping
    return wave_data

# Generate various audio files for testing
audio_configs = [
    # Sine waves (musical notes)
    (220, 'sine', 'A3_low_tone'),
    (261.63, 'sine', 'C4_middle_c'),
    (440, 'sine', 'A4_concert_pitch'),
    (523.25, 'sine', 'C5_high_c'),
    (880, 'sine', 'A5_high_tone'),
    
    # Different waveforms at 440Hz
    (440, 'square', '440hz_square_wave'),
    (440, 'sawtooth', '440hz_sawtooth_wave'),
    (440, 'triangle', '440hz_triangle_wave'),
    
    # Special frequencies
    (1000, 'sine', '1khz_test_tone'),
    (200, 'sine', '200hz_low_bass'),
]

print('Generating audio files:')
for freq, wave_type, name in audio_configs:
    filename = f'audio_files/{name}.wav'
    wave_data = generate_waveform(freq, waveform_type=wave_type)
    
    with wave.open(filename, 'w') as wav_file:
        wav_file.setnchannels(1)  # Mono
        wav_file.setsampwidth(2)  # 16-bit
        wav_file.setframerate(44100)
        wav_file.writeframes(wave_data.tobytes())
    
    print(f'  ‚úÖ {filename} ({wave_type} wave at {freq}Hz)')

print('')
print('üéµ Enhanced audio files created successfully!')
"

# Test installation thoroughly
echo ""
echo "üß™ Testing Installation..."
echo "========================="

python3 -c "
import sys
import traceback

def test_import(module_name, description, required=True):
    try:
        __import__(module_name)
        print(f'‚úÖ {description}')
        return True
    except ImportError as e:
        if required:
            print(f'‚ùå {description} - REQUIRED')
            print(f'   Error: {e}')
            return False
        else:
            print(f'‚ö†Ô∏è  {description} - OPTIONAL')
            return True

print('Testing core dependencies:')
success = True

# Test required modules
success &= test_import('pygame', 'pygame (graphics and audio)')
success &= test_import('numpy', 'numpy (numerical computing)')
success &= test_import('sounddevice', 'sounddevice (audio I/O)')
success &= test_import('serial', 'pyserial (serial communication)')
success &= test_import('scipy', 'scipy (scientific computing)')

print('')
print('Testing Bluetooth support:')

# Test Bluetooth modules (optional)
bleak_available = test_import('bleak', 'bleak (modern Bluetooth BLE)', required=False)
pybluez_available = test_import('bluetooth', 'pybluez (legacy Bluetooth)', required=False)

bluetooth_available = bleak_available or pybluez_available

print('')
print('Testing pygame functionality:')
try:
    import pygame
    pygame.mixer.init()
    print('‚úÖ pygame mixer initialization')
    
    pygame.freetype.init()
    print('‚úÖ pygame freetype font system')
    
    # Test display (headless safe)
    import os
    os.environ['SDL_VIDEODRIVER'] = 'dummy'
    pygame.display.init()
    test_surface = pygame.display.set_mode((100, 100))
    print('‚úÖ pygame display system')
    
except Exception as e:
    print(f'‚ùå pygame functionality test failed: {e}')
    success = False

print('')
print('üèÅ Installation Test Summary:')
print('============================')

if success:
    print('‚úÖ All required dependencies are working!')
    if bluetooth_available:
        print('‚úÖ Bluetooth support is available')
    else:
        print('‚ö†Ô∏è  Bluetooth support not available (app will still work)')
    print('')
    print('üéâ Installation completed successfully!')
else:
    print('‚ùå Some required dependencies failed')
    print('Please check the errors above and try again')
    sys.exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå Installation test failed"
    exit 1
fi

# Set proper permissions
chmod +x run.sh
chmod +x setup.sh

# Create a Bluetooth test script
echo "üìù Creating Bluetooth test script..."
cat > test_bluetooth.py << 'EOF'
#!/usr/bin/env python3
"""
Bluetooth Test Script
Tests Bluetooth functionality independently
"""

import sys
import asyncio

def test_bleak():
    """Test bleak Bluetooth BLE support"""
    try:
        import bleak
        from bleak import BleakScanner
        
        print("‚úÖ bleak library imported successfully")
        print(f"üìö bleak version: {bleak.__version__}")
        
        async def scan_test():
            print("üîç Testing BLE device scanning...")
            try:
                devices = await BleakScanner.discover(timeout=3.0)
                print(f"üì± Found {len(devices)} BLE devices nearby:")
                
                for device in devices[:5]:  # Show first 5 devices
                    name = device.name or "Unknown"
                    rssi = device.rssi or "N/A"
                    print(f"   ‚Ä¢ {name} ({device.address}) RSSI: {rssi}dBm")
                
                return True
            except Exception as e:
                print(f"‚ùå BLE scan failed: {e}")
                return False
        
        # Run async scan test
        result = asyncio.run(scan_test())
        return result
        
    except ImportError:
        print("‚ùå bleak not available")
        return False
    except Exception as e:
        print(f"‚ùå bleak test failed: {e}")
        return False

def test_pybluez():
    """Test pybluez Bluetooth support"""
    try:
        import bluetooth
        
        print("‚úÖ pybluez library imported successfully")
        
        print("üîç Testing Bluetooth device discovery...")
        try:
            # Quick discovery test (2 seconds)
            devices = bluetooth.discover_devices(duration=2, lookup_names=False)
            print(f"üì± Found {len(devices)} Bluetooth devices nearby")
            
            if devices:
                print("   Sample devices:")
                for addr in devices[:3]:  # Show first 3 devices
                    try:
                        name = bluetooth.lookup_name(addr, timeout=5)
                        name = name or "Unknown"
                        print(f"   ‚Ä¢ {name} ({addr})")
                    except:
                        print(f"   ‚Ä¢ Unknown ({addr})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Bluetooth discovery failed: {e}")
            return False
        
    except ImportError:
        print("‚ùå pybluez not available")
        return False
    except Exception as e:
        print(f"‚ùå pybluez test failed: {e}")
        return False

def main():
    print("üß™ Bluetooth Connectivity Test")
    print("===============================")
    print("")
    
    bleak_works = test_bleak()
    print("")
    pybluez_works = test_pybluez()
    
    print("")
    print("üìä Test Results:")
    print("================")
    
    if bleak_works:
        print("‚úÖ bleak (modern BLE) - WORKING")
        print("   Recommended for new devices and cross-platform support")
    else:
        print("‚ùå bleak (modern BLE) - NOT WORKING")
    
    if pybluez_works:
        print("‚úÖ pybluez (legacy) - WORKING")
        print("   Good for older HC-05/HC-06 devices")
    else:
        print("‚ùå pybluez (legacy) - NOT WORKING")
    
    print("")
    
    if bleak_works or pybluez_works:
        print("üéâ Bluetooth support is available!")
        print("   Your application can connect to Bluetooth devices")
    else:
        print("‚ö†Ô∏è  No Bluetooth support available")
        print("   Your application will work with:")
        print("   ‚Ä¢ Serial/USB connections")
        print("   ‚Ä¢ Demo mode")
        print("")
        print("üí° To enable Bluetooth:")
        print("   ‚Ä¢ Make sure Bluetooth is enabled on your system")
        print("   ‚Ä¢ Install system Bluetooth development packages")
        print("   ‚Ä¢ Try running as administrator/sudo (if needed)")

if __name__ == "__main__":
    main()
EOF

chmod +x test_bluetooth.py

echo ""
echo "üéâ Enhanced Setup Complete!"
echo "=========================="
echo ""
echo "üìä Installation Summary:"
echo "  ‚úÖ Python environment configured"
echo "  ‚úÖ Core dependencies installed"
echo "  ‚úÖ Enhanced audio files generated"
echo "  ‚úÖ Application structure created"

# Final Bluetooth status check
python3 -c "
try:
    import bleak
    print('  ‚úÖ Modern Bluetooth (bleak) available')
except ImportError:
    try:
        import bluetooth
        print('  ‚úÖ Legacy Bluetooth (pybluez) available')
    except ImportError:
        print('  ‚ö†Ô∏è  Bluetooth support not available')
"

echo ""
echo "üöÄ Ready to Launch!"
echo "=================="
echo ""
echo "To start the application:"
echo "  ./run.sh"
echo ""
echo "To test Bluetooth connectivity:"
echo "  python3 test_bluetooth.py"
echo ""
echo "Manual launch:"
echo "  source venv/bin/activate"
echo "  python3 main.py"
echo ""
echo "üìù Notes:"
echo "  ‚Ä¢ App works without Bluetooth (serial + demo mode)"
echo "  ‚Ä¢ For HC-05/HC-06 devices, ensure they're paired first"
echo "  ‚Ä¢ BLE devices will be discovered automatically"
echo "  ‚Ä¢ Check logs/ directory for detailed logging"